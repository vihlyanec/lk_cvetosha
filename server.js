const http = require('http');
const fs = require('fs');
const path = require('path');
const url = require('url');

const PORT = 3000;
const PROMOTIONS_FILE = 'promotions.json';

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫—Ü–∏—è–º–∏
async function loadPromotions() {
    try {
        const data = await fs.promises.readFile(PROMOTIONS_FILE, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.log('–§–∞–π–ª –∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π');
        return [];
    }
}

async function savePromotions(promotions) {
    await fs.promises.writeFile(PROMOTIONS_FILE, JSON.stringify(promotions, null, 2));
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–∫—Ü–∏–π
async function handlePromotionsAPI(req, res) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }
    
    try {
        if (req.method === 'GET') {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ü–∏–π
            const promotions = await loadPromotions();
            res.writeHead(200, { 'Content-Type': 'application/json; charset=utf-8' });
            res.end(JSON.stringify(promotions));
            
        } else if (req.method === 'POST') {
            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–∫—Ü–∏–∏
            let body = '';
            req.on('data', chunk => {
                body += chunk.toString();
            });
            
            req.on('end', async () => {
                try {
                    const newPromotion = JSON.parse(body);
                    const promotions = await loadPromotions();
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º ID –∏ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
                    newPromotion.id = Date.now();
                    newPromotion.createdAt = new Date().toISOString();
                    
                    promotions.push(newPromotion);
                    await savePromotions(promotions);
                    
                    res.writeHead(201, { 'Content-Type': 'application/json; charset=utf-8' });
                    res.end(JSON.stringify(newPromotion));
                } catch (error) {
                    res.writeHead(400, { 'Content-Type': 'application/json; charset=utf-8' });
                    res.end(JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' }));
                }
            });
            
        } else if (req.method === 'PUT') {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏–∏
            let body = '';
            req.on('data', chunk => {
                body += chunk.toString();
            });
            
            req.on('end', async () => {
                try {
                    const updatedPromotion = JSON.parse(body);
                    const promotions = await loadPromotions();
                    
                    const index = promotions.findIndex(p => p.id === updatedPromotion.id);
                    if (index !== -1) {
                        promotions[index] = { ...promotions[index], ...updatedPromotion };
                        await savePromotions(promotions);
                        
                        res.writeHead(200, { 'Content-Type': 'application/json; charset=utf-8' });
                        res.end(JSON.stringify(promotions[index]));
                    } else {
                        res.writeHead(404, { 'Content-Type': 'application/json; charset=utf-8' });
                        res.end(JSON.stringify({ error: '–ê–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }));
                    }
                } catch (error) {
                    res.writeHead(400, { 'Content-Type': 'application/json; charset=utf-8' });
                    res.end(JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' }));
                }
            });
            
        } else if (req.method === 'DELETE') {
            // –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ü–∏–∏
            const urlParts = url.parse(req.url, true);
            const id = parseInt(urlParts.query.id);
            
            if (!id) {
                res.writeHead(400, { 'Content-Type': 'application/json; charset=utf-8' });
                res.end(JSON.stringify({ error: 'ID –∞–∫—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω' }));
                return;
            }
            
            const promotions = await loadPromotions();
            const index = promotions.findIndex(p => p.id === id);
            
            if (index !== -1) {
                const deletedPromotion = promotions.splice(index, 1)[0];
                await savePromotions(promotions);
                
                res.writeHead(200, { 'Content-Type': 'application/json; charset=utf-8' });
                res.end(JSON.stringify(deletedPromotion));
            } else {
                res.writeHead(404, { 'Content-Type': 'application/json; charset=utf-8' });
                res.end(JSON.stringify({ error: '–ê–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }));
            }
            
        } else {
            res.writeHead(405, { 'Content-Type': 'application/json; charset=utf-8' });
            res.end(JSON.stringify({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' }));
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ API –∞–∫—Ü–∏–π:', error);
        res.writeHead(500, { 'Content-Type': 'application/json; charset=utf-8' });
        res.end(JSON.stringify({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }));
    }
}

// MIME —Ç–∏–ø—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤
const mimeTypes = {
    '.html': 'text/html',
    '.js': 'text/javascript',
    '.css': 'text/css',
    '.json': 'application/json',
    '.png': 'image/png',
    '.jpg': 'image/jpg',
    '.gif': 'image/gif',
    '.svg': 'image/svg+xml',
    '.wav': 'audio/wav',
    '.mp4': 'video/mp4',
    '.woff': 'application/font-woff',
    '.ttf': 'application/font-ttf',
    '.eot': 'application/vnd.ms-fontobject',
    '.otf': 'application/font-otf',
    '.wasm': 'application/wasm'
};

const server = http.createServer((req, res) => {
    // –ü–∞—Ä—Å–∏–º URL
    const parsedUrl = url.parse(req.url);
    let pathname = parsedUrl.pathname;
    
    // –£–±–∏—Ä–∞–µ–º trailing slash
    if (pathname.endsWith('/') && pathname.length > 1) {
        pathname = pathname.slice(0, -1);
    }
    
    // API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∞–∫—Ü–∏–π
    if (pathname === '/api/promotions') {
        handlePromotionsAPI(req, res);
        return;
    }
    
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ –∫–æ—Ä–Ω—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º index.html
    if (pathname === '' || pathname === '/') {
        pathname = '/index.html';
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const ext = path.parse(pathname).ext;
    const mimeType = mimeTypes[ext] || 'application/octet-stream';
    
    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    const filePath = path.join(__dirname, pathname);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    fs.access(filePath, fs.constants.F_OK, (err) => {
        if (err) {
            // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            res.writeHead(404, { 'Content-Type': 'text/html; charset=utf-8' });
            res.end(`
                <!DOCTYPE html>
                <html>
                <head>
                    <title>404 - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</title>
                    <style>
                        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                        .error { color: #e74c3c; font-size: 72px; margin-bottom: 20px; }
                        .message { font-size: 24px; margin-bottom: 20px; }
                        .back { color: #3498db; text-decoration: none; }
                    </style>
                </head>
                <body>
                    <div class="error">404</div>
                    <div class="message">–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</div>
                    <a href="/" class="back">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
                </body>
                </html>
            `);
            return;
        }
        
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        fs.readFile(filePath, (err, data) => {
            if (err) {
                res.writeHead(500, { 'Content-Type': 'text/html; charset=utf-8' });
                res.end('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
                return;
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            res.writeHead(200, { 
                'Content-Type': mimeType + (mimeType.startsWith('text/') ? '; charset=utf-8' : ''),
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization'
            });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            res.end(data);
        });
    });
});

server.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    console.log(`üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
    console.log(`üîó –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: http://localhost:${PORT}?id=123&api_key=your_api_key`);
    console.log(`\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:`);
    console.log(`   - index.html - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞`);
    console.log(`   - main.js - –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞`);
    console.log(`   - styles.css - –°—Ç–∏–ª–∏`);
    console.log(`   - admin-bot.js - Telegram –±–æ—Ç`);
    console.log(`\n‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
server.on('error', (err) => {
    if (err.code === 'EADDRINUSE') {
        console.error(`‚ùå –ü–æ—Ä—Ç ${PORT} —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç.`);
    } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    }
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    });
}); 